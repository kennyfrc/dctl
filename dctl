#!/bin/bash

# dctl - Daemon control wrapper that handles paths and prints PIDs
# A wrapper around daemon that prints the daemon PID to stdout
# Usage: dctl [daemon-flags] [-w file] [--] command [args...]
# Options:
#   -w, --write-info file    Write process name and PID to file

# Parse daemon flags until we hit -- or a non-flag argument
DAEMON_ARGS=()
NAME=""
HAS_D_FLAG=false
HAS_O_FLAG=false
HAS_F_FLAG=false
HAS_W_FLAG=false
WRITE_INFO_FILE=""
PIDFILE=""
CURRENT_DIR="$(pwd)"

# Check for help/version flags that should be passed directly to daemon
for arg in "$@"; do
    case "$arg" in
        -h|--help|-V|--version|--list|--running|--restart|--stop)
            exec daemon "$@"
            ;;
    esac
done

# Function to check if an argument looks like a daemon flag
is_daemon_flag() {
    case "$1" in
        -h|--help|-V|--version|-v|--verbose*|-d|--debug*|-C|--config*|-N|--noconfig)
            return 0 ;;
        -n|--name*|-X|--command*|-P|--pidfiles*|-F|--pidfile*|-u|--user*|-R|--chroot*)
            return 0 ;;
        -D|--chdir*|-m|--umask*|-e|--env*|-i|--inherit|-U|--unsafe|-S|--safe)
            return 0 ;;
        -c|--core|--nocore|-r|--respawn|-a|--acceptable*|-A|--attempts*|-L|--delay*)
            return 0 ;;
        -M|--limit*|--idiot|-f|--foreground|-p|--pty*|-l|--errlog*|-b|--dbglog*)
            return 0 ;;
        -o|--output*|-O|--stdout*|-E|--stderr*|--ignore-eof|--read-eof)
            return 0 ;;
        --running|--restart|--stop|--signal*|--list)
            return 0 ;;
        -*)
            # Unknown flag - pass it through as daemon might understand it
            return 0 ;;
        *)
            return 1 ;;
    esac
}

# Function to check if a flag expects an argument
flag_expects_arg() {
    case "$1" in
        -v|--verbose|-d|--debug|-C|--config|-n|--name|-X|--command)
            return 0 ;;
        -P|--pidfiles|-F|--pidfile|-u|--user|-R|--chroot|-D|--chdir)
            return 0 ;;
        -m|--umask|-e|--env|-a|--acceptable|-A|--attempts|-L|--delay)
            return 0 ;;
        -M|--limit|-p|--pty|-l|--errlog|-b|--dbglog|-o|--output)
            return 0 ;;
        -O|--stdout|-E|--stderr|--signal)
            return 0 ;;
        *)
            return 1 ;;
    esac
}

while [[ $# -gt 0 ]]; do
    case "$1" in
        --)
            shift
            break
            ;;
        -n|--name)
            DAEMON_ARGS+=("$1")
            shift
            if [[ $# -gt 0 ]] && [[ "$1" != -* ]]; then
                NAME="$1"
                DAEMON_ARGS+=("$1")
                shift
            fi
            ;;
        -D|--chdir)
            HAS_D_FLAG=true
            DAEMON_ARGS+=("$1")
            shift
            if [[ $# -gt 0 ]] && [[ "$1" != -* ]]; then
                # Convert relative directory to absolute
                if [[ "$1" != /* ]]; then
                    DAEMON_ARGS+=("$CURRENT_DIR/$1")
                else
                    DAEMON_ARGS+=("$1")
                fi
                shift
            fi
            ;;
        -o|--output)
            HAS_O_FLAG=true
            DAEMON_ARGS+=("$1")
            shift
            if [[ $# -gt 0 ]] && [[ "$1" != -* ]]; then
                # Convert relative log path to absolute
                if [[ "$1" != /* ]]; then
                    DAEMON_ARGS+=("$CURRENT_DIR/$1")
                else
                    DAEMON_ARGS+=("$1")
                fi
                shift
            fi
            ;;
        -w|--write-info)
            HAS_W_FLAG=true
            shift
            if [[ $# -gt 0 ]] && [[ "$1" != -* ]]; then
                # Convert relative write info path to absolute
                if [[ "$1" != /* ]]; then
                    WRITE_INFO_FILE="$CURRENT_DIR/$1"
                else
                    WRITE_INFO_FILE="$1"
                fi
                shift
            else
                echo "Error: -w/--write-info requires a file path"
                exit 1
            fi
            ;;
        -F|--pidfile)
            HAS_F_FLAG=true
            DAEMON_ARGS+=("$1")
            shift
            if [[ $# -gt 0 ]] && [[ "$1" != -* ]]; then
                # Convert relative pidfile path to absolute
                if [[ "$1" != /* ]]; then
                    PIDFILE="$CURRENT_DIR/$1"
                    DAEMON_ARGS+=("$CURRENT_DIR/$1")
                else
                    PIDFILE="$1"
                    DAEMON_ARGS+=("$1")
                fi
                shift
            fi
            ;;
        -P|--pidfiles|-R|--chroot|-C|--config)
            # Flags that take path arguments - convert relative to absolute
            DAEMON_ARGS+=("$1")
            shift
            if [[ $# -gt 0 ]] && [[ "$1" != -* ]]; then
                if [[ "$1" != /* ]]; then
                    DAEMON_ARGS+=("$CURRENT_DIR/$1")
                else
                    DAEMON_ARGS+=("$1")
                fi
                shift
            fi
            ;;
        *)
            # Check if this is a known flag
            if is_daemon_flag "$1"; then
                DAEMON_ARGS+=("$1")
                # Check if this flag expects an argument
                if flag_expects_arg "$1"; then
                    shift
                    if [[ $# -gt 0 ]] && [[ "$1" != -* ]]; then
                        DAEMON_ARGS+=("$1")
                        shift
                    fi
                else
                    shift
                fi
            else
                # Not a flag - this must be the command
                break
            fi
            ;;
    esac
done

# Now process the command
if [[ $# -eq 0 ]]; then
    echo "Error: No command specified"
    echo "Usage: dctl [daemon-flags] [--] command [args...]"
    exit 1
fi

# Get the command
COMMAND="$1"
shift
COMMAND_ARGS=("$@")

# Convert relative command path to absolute
if [[ "$COMMAND" == ./* ]] || [[ "$COMMAND" == ../* ]]; then
    # Relative path - convert to absolute
    ABS_COMMAND="$(cd "$(dirname "$COMMAND")" 2>/dev/null && pwd)/$(basename "$COMMAND")"
    if [[ -f "$ABS_COMMAND" ]]; then
        COMMAND="$ABS_COMMAND"
    else
        # Try from current directory
        COMMAND="$CURRENT_DIR/${COMMAND#./}"
    fi
elif [[ "$COMMAND" != /* ]] && [[ ! -x "$(command -v "$COMMAND")" ]]; then
    # Not an absolute path and not in PATH - check if it exists in current dir
    if [[ -f "$CURRENT_DIR/$COMMAND" ]]; then
        COMMAND="$CURRENT_DIR/$COMMAND"
    fi
fi

# Generate a random name if none was provided
if [[ -z "$NAME" ]]; then
    # Generate random name with timestamp and random number
    NAME="daemon_$$_$(date +%s)_$RANDOM"
    DAEMON_ARGS+=("-n" "$NAME")
fi

# Add default -D flag if not specified
if [[ "$HAS_D_FLAG" == false ]]; then
    DAEMON_ARGS+=("-D" "$CURRENT_DIR")
fi

# Add default -o flag if not specified and we have a name
if [[ "$HAS_O_FLAG" == false ]] && [[ -n "$NAME" ]]; then
    DAEMON_ARGS+=("-o" "$CURRENT_DIR/${NAME}.log")
fi

# Determine pidfile location
if [[ -n "$PIDFILE" ]]; then
    # Already set from -F flag
    true
elif [[ -n "$NAME" ]]; then
    # Determine default pidfile location based on user
    if [[ $EUID -eq 0 ]]; then
        # Root user
        if [[ "$(uname)" == "Darwin" ]]; then
            # macOS
            if [[ -d "/opt/local/var/run" ]]; then
                # MacPorts installation
                PIDFILE="/opt/local/var/run/${NAME}.pid"
            else
                PIDFILE="/var/run/${NAME}.pid"
            fi
        elif [[ "$(uname)" == "SunOS" ]]; then
            # Solaris
            PIDFILE="/etc/${NAME}.pid"
        else
            # Linux and other Unix
            PIDFILE="/var/run/${NAME}.pid"
        fi
    else
        # Normal user
        PIDFILE="/tmp/${NAME}.pid"
    fi
fi

# Execute the daemon command
daemon "${DAEMON_ARGS[@]}" -- "$COMMAND" "${COMMAND_ARGS[@]}"
DAEMON_EXIT_CODE=$?

# If daemon started successfully and we have a pidfile, try to read and print the PID
if [[ $DAEMON_EXIT_CODE -eq 0 ]] && [[ -n "$PIDFILE" ]]; then
    # Give daemon a moment to create the pidfile
    for i in {1..10}; do
        if [[ -f "$PIDFILE" ]]; then
            PID=$(cat "$PIDFILE" 2>/dev/null)
            if [[ -n "$PID" ]]; then
                # Print name and PID to stdout
                echo "$NAME $PID"
                
                # Write to info file if requested
                if [[ -n "$WRITE_INFO_FILE" ]]; then
                    echo "$NAME $PID" > "$WRITE_INFO_FILE"
                fi
                
                break
            fi
        fi
        sleep 0.1
    done
fi

exit $DAEMON_EXIT_CODE